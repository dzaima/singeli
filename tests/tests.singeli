g{T,n}(a:T) {
  x:T = n+a;
  x
}
'ok1' = g{i32, 5};
'ok2' = g{i32, 1*2 + 3*4};

addSep{A,B}(a:A, b:B) : A {
  a+b
}
'ok3' = addSep{i32,i32};
'i32Plusi64' = addSep{i32,i64};
'wrongTargCount' = addSep{i32};

h1{T,n}(a:[n]T, b:[n]T) : [n]T => a + b;
'ok4' = h1{i32,4};

mismatchedVectorSize{A,B}(a:A, b:B) => a + b;
'mismatchedVectorSize' = mismatchedVectorSize{[4]i32, [8]i32};

vecOfVecs{T}(a:[4]T) { }
'vecOfVecs' = vecOfVecs{[2]i32};

recursion() { recursion(); }
'recursion' = recursion;

noReturn() { }
'noReturn' = noReturn;

badSize{T}(a:[T]i32) => a;
'badSize' = badSize{i32};

notConstant(a:i32) { x:[a]i32 = 5; 1 }
'notConstant'=notConstant;

addi32(a:i32, b:i32) => a+b;

wrongArgTypes(a: i64) => addi32(5, a);
'wrongArgTypes'=wrongArgTypes;

wrongArgCount1() => addi32(5);
'wrongArgCount1'=wrongArgCount1;

wrongArgCount2() => addi32(5,6,7);
'wrongArgCount2'=wrongArgCount2;

f{T}(a: 2*T) : T*2 => a;
'ok5'    =f{u8};
'ok6'    =f{i32};
'i128'   =f{i64};
'ok7'    =f{[4]u8};
'ok8'    =f{[4]i32};
'i128Vec'=f{[4]i64};

add{T}(a:T, b:T) => a+b;
'ok_add_i32'  = add{i32};
'ok_add_f32'  = add{f32};
'ok_add_f64'  = add{f64};
'ok_add_fvi32' = add{$i32};
'ok_add_fvf32' = add{$f32};
'ok_add_fvf64' = add{$f64};
'addPtrs' = add{*i32};
inc(a: i32) => add{i32}(1, a);
'ok_inc' = inc;

three{T, fn}(a:T, b:T, c:T) => fn{T}(fn{T}(a, b), c);
'ok_add3i32' = three{i32, add};

threeB{T, fn}(a:T, b:T, c:T) => fn(fn(a, b), c);
'ok_add3i32B' = threeB{i32, add{i32}};

'functionType' = add{add};

iadd{T & T=   i32}(a:T, b:T) => emit T "add" a b;
iadd{T & T=[4]i32}(a:T, b:T) => emit T "mm_add_epi32" a b;
iadd{T & T=[8]i32}(a:T, b:T) => emit T "mm256_add_epi32" a b;
'ok_iadd_i32'  = iadd{i32};
'ok_iadd_4i32' = iadd{[4]i32};
'ok_iadd_8i32' = iadd{[8]i32};
'iadd_5i32'    = iadd{[5]i32};
'iadd_i64'     = iadd{i64};

n2066{T}(a:[n]T) => [1]T;
'n2066' = n2066{100*2/3 + 3000 - 1000};

const_int():i32=> 123   ; 'ok_const_int'=const_int;
const_i32():i32=> 123i32; 'ok_const_i32'=const_i32;
const_u32():u32=> 123u32; 'ok_const_u32'=const_u32;

const_i64():i64=>  9223372036854775807i64; 'ok_const_i64'=const_i64;
const_u64():u64=> 18446744073709551615u64; 'ok_const_u64'=const_u64;
bad_i64  ():i64=>  9223372036854775808i64; 'const_i64O'  =bad_i64;
bad_u64  ():u64=> 99999999999999999999u64; 'const_u64O'  =bad_u64;

const_i8 ():i8 => 123i8; 'ok_const_i8' =const_i8;
const_u8 ():u8 => 234u8; 'ok_const_u8' =const_u8;
bad_i8   ():i8 => 234i8; 'const_i8O'=bad_i8;
bad_u8   ():u8 => 456u8; 'const_u8O'=bad_u8;

def_i8{n}():i8=>n;
'ok_def_i8'=def_i8{123i8};
'def_i8O'  =def_i8{234i8};

hex_int():i32 => 0xffffffff   ; 'ok_hex_int'=hex_int; hex_intO():i32 => 0xfffffffff   ; 'hex_intO'=hex_intO;
hex_i32():i32 => 0xffffffffi32; 'ok_hex_i32'=hex_i32; hex_i32O():i32 => 0xfffffffffi32; 'hex_i32O'=hex_i32O;
hex_u32():u32 => 0xffffffffu32; 'ok_hex_u32'=hex_u32; hex_u32O():u32 => 0xfffffffffu32; 'hex_u32O'=hex_u32O;
hex_i8():i32 => 0xffi32; 'ok_hex_i8'=hex_i8; hex_i8O():i8 => 0xfffi8; 'hex_i8O'=hex_i8O;
hex_u8():u32 => 0xffu32; 'ok_hex_u8'=hex_u8; hex_u8O():u8 => 0xfffu8; 'hex_u8O'=hex_u8O;

c_f32():f32 => 12.3f; 'ok_f32'=c_f32;
c_f64():f64 => 12.3d; 'ok_f64'=c_f64;