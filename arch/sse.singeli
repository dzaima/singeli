__add{T, T & T.int}(a:T, b:T) => emit T "op +" a b;
__sub{T, T & T.int}(a:T, b:T) => emit T "op -" a b;
__mul{T, T & T.int}(a:T, b:T) => emit T "op *" a b;
__div{T, T & T.int}(a:T, b:T) => emit T "op /" a b;
__cmpgt{T, T & T.int}(a: T, b:T) => emit u1 "op >"  a b;
__cmpge{T, T & T.int}(a: T, b:T) => emit u1 "op >=" a b;
__cmplt{T, T & T.int}(a: T, b:T) => emit u1 "op <"  a b;
__cmple{T, T & T.int}(a: T, b:T) => emit u1 "op <=" a b;

__abs       {T & T=[8]i16}                             (a:T)              => emit [8]i16 "_mm_abs_epi16" a;                # pabsw
__abs       {T & T=[4]i32}                             (a:T)              => emit [4]i32 "_mm_abs_epi32" a;                # pabsd
__abs       {T & T=[16]i8}                             (a:T)              => emit [16]i8 "_mm_abs_epi8" a;                 # pabsb
__add       {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_add_epi16" a b;              # paddw
__add       {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_add_epi32" a b;              # paddd
__add       {T, S & T=[2]i64 & S=[2]i64}               (a:T, b:S)         => emit [2]i64 "_mm_add_epi64" a b;              # paddq
__add       {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_add_epi8" a b;               # paddb
__add       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_add_pd" a b;                 # addpd
__add       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_add_ps" a b;                 # addps
__add       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_add_sd" a b;                 # addsd
__add       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_add_ss" a b;                 # addss
__adds      {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_adds_epi16" a b;             # paddsw
__adds      {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_adds_epi8" a b;              # paddsb
__adds      {T, S & T=[8]u16 & S=[8]u16}               (a:T, b:S)         => emit [8]u16 "_mm_adds_epu16" a b;             # paddusw
__adds      {T, S & T=[16]u8 & S=[16]u8}               (a:T, b:S)         => emit [16]u8 "_mm_adds_epu8" a b;              # paddusb
__addsub    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_addsub_pd" a b;              # addsubpd
__addsub    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_addsub_ps" a b;              # addsubps
__alignr    {T, S, imm8 & T=[16]i8 & T=S}              (a:T, b:S)         => emit [16]i8 "_mm_alignr_epi8" a b imm8;       # palignr
__and       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_and_pd" a b;                 # andpd
__and       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_and_ps" a b;                 # andps
__and       {T, S & T.size=128 & T.size=128}           (a:T, b:S)         => emit T      "_mm_and_si128" a b;              # pand
__andnot    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_andnot_pd" a b;              # andnpd
__andnot    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_andnot_ps" a b;              # andnps
__andnot    {T, S & T.size=128 & T=S}                  (a:T, b:S)         => emit T      "_mm_andnot_si128" a b;           # pandn
__avg       {T, S & T=[8]u16 & S=[8]u16}               (a:T, b:S)         => emit [8]u16 "_mm_avg_epu16" a b;              # pavgw
__avg       {T, S & T=[16]u8 & S=[16]u8}               (a:T, b:S)         => emit [16]u8 "_mm_avg_epu8" a b;               # pavgb
__blend     {T, S, imm8 & T=[8]i16 & S=[8]i16}         (a:T, b:S)         => emit [8]i16 "_mm_blend_epi16" a b imm8;       # pblendw
__blend     {T, S, imm8 & T=[2]f64 & S=[2]f64}         (a:T, b:S)         => emit [2]f64 "_mm_blend_pd" a b imm8;          # blendpd
__blend     {T, S, imm8 & T=[4]f32 & S=[4]f32}         (a:T, b:S)         => emit [4]f32 "_mm_blend_ps" a b imm8;          # blendps
__blendv    {T, S, R & T=[16]i8 & S=[16]i8 & R=[16]i8} (a:T, b:S, mask:R) => emit [16]i8 "_mm_blendv_epi8" a b mask;       # pblendvb
__blendv    {T, S, R & T=[2]f64 & S=[2]f64 & R=[2]f64} (a:T, b:S, mask:R) => emit [2]f64 "_mm_blendv_pd" a b mask;         # blendvpd
__blendv    {T, S, R & T=[4]f32 & S=[4]f32 & R=[4]f32} (a:T, b:S, mask:R) => emit [4]f32 "_mm_blendv_ps" a b mask;         # blendvps
__ceil      {T & T=[2]f64}                             (a:T)              => emit [2]f64 "_mm_ceil_pd" a;                  # roundpd
__ceil      {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_ceil_ps" a;                  # roundps
__ceil      {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_ceil_sd" a b;                # roundsd
__ceil      {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_ceil_ss" a b;                # roundss
__cmpeq     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_cmpeq_epi16" a b;            # pcmpeqw
__cmpeq     {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_cmpeq_epi32" a b;            # pcmpeqd
__cmpeq     {T, S & T=[2]i64 & S=[2]i64}               (a:T, b:S)         => emit [2]i64 "_mm_cmpeq_epi64" a b;            # pcmpeqq
__cmpeq     {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_cmpeq_epi8" a b;             # pcmpeqb
__cmpeq     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpeq_pd" a b;               # cmppd
__cmpeq     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpeq_ps" a b;               # cmpps
__cmpeq     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpeq_sd" a b;               # cmpsd
__cmpeq     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpeq_ss" a b;               # cmpss
__cmpge     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpge_pd" a b;               # cmppd
__cmpge     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpge_ps" a b;               # cmpps
__cmpge     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpge_sd" a b;               # cmpsd
__cmpge     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpge_ss" a b;               # cmpss
__cmpgt     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_cmpgt_epi16" a b;            # pcmpgtw
__cmpgt     {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_cmpgt_epi32" a b;            # pcmpgtd
__cmpgt     {T, S & T=[2]i64 & S=[2]i64}               (a:T, b:S)         => emit [2]i64 "_mm_cmpgt_epi64" a b;            # pcmpgtq
__cmpgt     {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_cmpgt_epi8" a b;             # pcmpgtb
__cmpgt     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpgt_pd" a b;               # cmppd
__cmpgt     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpgt_ps" a b;               # cmpps
__cmpgt     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpgt_sd" a b;               # cmpsd
__cmpgt     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpgt_ss" a b;               # cmpss
__cmple     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmple_pd" a b;               # cmppd
__cmple     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmple_ps" a b;               # cmpps
__cmple     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmple_sd" a b;               # cmpsd
__cmple     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmple_ss" a b;               # cmpss
__cmplt     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_cmplt_epi16" a b;            # pcmpgtw
__cmplt     {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_cmplt_epi32" a b;            # pcmpgtd
__cmplt     {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_cmplt_epi8" a b;             # pcmpgtb
__cmplt     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmplt_pd" a b;               # cmppd
__cmplt     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmplt_ps" a b;               # cmpps
__cmplt     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmplt_sd" a b;               # cmpsd
__cmplt     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmplt_ss" a b;               # cmpss
__cmpneq    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpneq_pd" a b;              # cmppd
__cmpneq    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpneq_ps" a b;              # cmpps
__cmpneq    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpneq_sd" a b;              # cmpsd
__cmpneq    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpneq_ss" a b;              # cmpss
__cmpnge    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpnge_pd" a b;              # cmppd
__cmpnge    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpnge_ps" a b;              # cmpps
__cmpnge    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpnge_sd" a b;              # cmpsd
__cmpnge    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpnge_ss" a b;              # cmpss
__cmpngt    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpngt_pd" a b;              # cmppd
__cmpngt    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpngt_ps" a b;              # cmpps
__cmpngt    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpngt_sd" a b;              # cmpsd
__cmpngt    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpngt_ss" a b;              # cmpss
__cmpnle    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpnle_pd" a b;              # cmppd
__cmpnle    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpnle_ps" a b;              # cmpps
__cmpnle    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpnle_sd" a b;              # cmpsd
__cmpnle    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpnle_ss" a b;              # cmpss
__cmpnlt    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpnlt_pd" a b;              # cmppd
__cmpnlt    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpnlt_ps" a b;              # cmpps
__cmpnlt    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpnlt_sd" a b;              # cmpsd
__cmpnlt    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpnlt_ss" a b;              # cmpss
__cmpord    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpord_pd" a b;              # cmppd
__cmpord    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpord_ps" a b;              # cmpps
__cmpord    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpord_sd" a b;              # cmpsd
__cmpord    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpord_ss" a b;              # cmpss
__cmpunord  {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpunord_pd" a b;            # cmppd
__cmpunord  {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpunord_ps" a b;            # cmpps
__cmpunord  {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_cmpunord_sd" a b;            # cmpsd
__cmpunord  {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_cmpunord_ss" a b;            # cmpss
__comieq    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]u1  "_mm_comieq_sd" a b;              # comisd
__comieq    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]u1  "_mm_comieq_ss" a b;              # comiss
__comige    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]u1  "_mm_comige_sd" a b;              # comisd
__comige    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]u1  "_mm_comige_ss" a b;              # comiss
__comigt    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]u1  "_mm_comigt_sd" a b;              # comisd
__comigt    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]u1  "_mm_comigt_ss" a b;              # comiss
__comile    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]u1  "_mm_comile_sd" a b;              # comisd
__comile    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]u1  "_mm_comile_ss" a b;              # comiss
__comilt    {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]u1  "_mm_comilt_sd" a b;              # comisd
__comilt    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]u1  "_mm_comilt_ss" a b;              # comiss
__comineq   {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]u1  "_mm_comineq_sd" a b;             # comisd
__comineq   {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]u1  "_mm_comineq_ss" a b;             # comiss
__cvt       {T, S & T=[4]f32 & S=i32}                  (a:T, b:S)         => emit [4]f32 "_mm_cvt_si2ss" a b;              # cvtsi2ss
__cvt       {T & T=[4]f32}                             (a:T)              => emit i32    "_mm_cvt_ss2si" a;                # cvtss2si
__cvtepi16  {T & T=[4]i32}                             (a:T)              => emit [4]i32 "_mm_cvtepi16_epi32" a;           # pmovsxwd
__cvtepi16  {T & T=[2]i64}                             (a:T)              => emit [2]i64 "_mm_cvtepi16_epi64" a;           # pmovsxwq
__cvtepi32  {T & T=[4]i32}                             (a:T)              => emit [4]i32 "_mm_cvtepi32_epi64" a;           # pmovsxdq
__cvtepi32  {T & T=[4]i32}                             (a:T)              => emit [2]f64 "_mm_cvtepi32_pd" a;              # cvtdq2pd
__cvtepi32  {T & T=[4]i32}                             (a:T)              => emit [4]f32 "_mm_cvtepi32_ps" a;              # cvtdq2ps
__cvtepi8   {T & T=[8]i16}                             (a:T)              => emit [8]i16 "_mm_cvtepi8_epi16" a;            # pmovsxbw
__cvtepi8   {T & T=[4]i32}                             (a:T)              => emit [4]i32 "_mm_cvtepi8_epi32" a;            # pmovsxbd
__cvtepi8   {T & T=[2]i64}                             (a:T)              => emit [2]i64 "_mm_cvtepi8_epi64" a;            # pmovsxbq
__cvtepu16  {T & T=[4]i32}                             (a:T)              => emit [4]i32 "_mm_cvtepu16_epi32" a;           # pmovzxwd
__cvtepu16  {T & T=[2]i64}                             (a:T)              => emit [2]i64 "_mm_cvtepu16_epi64" a;           # pmovzxwq
__cvtepu32  {T & T=[2]i64}                             (a:T)              => emit [2]i64 "_mm_cvtepu32_epi64" a;           # pmovzxdq
__cvtepu8   {T & T=[8]i16}                             (a:T)              => emit [8]i16 "_mm_cvtepu8_epi16" a;            # pmovzxbw
__cvtepu8   {T & T=[4]i32}                             (a:T)              => emit [4]i32 "_mm_cvtepu8_epi32" a;            # pmovzxbd
__cvtepu8   {T & T=[2]i64}                             (a:T)              => emit [2]i64 "_mm_cvtepu8_epi64" a;            # pmovzxbq
__div       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_div_pd" a b;                 # divpd
__div       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_div_ps" a b;                 # divps
__div       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_div_sd" a b;                 # divsd
__div       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_div_ss" a b;                 # divss
__dp        {T, S, imm8 & T=[2]f64 & S=[2]f64}         (a:T, b:S)         => emit [2]f64 "_mm_dp_pd" a b imm8;             # dppd
__dp        {T, S, imm8 & T=[4]f32 & S=[4]f32}         (a:T, b:S)         => emit [4]f32 "_mm_dp_ps" a b imm8;             # dpps
__extract   {T, imm8 & T=[8]i16}                       (a:T)              => emit i16    "_mm_extract_epi16" a imm8;       # pextrw
__extract   {T, imm8 & T=[4]i32}                       (a:T)              => emit i32    "_mm_extract_epi32" a imm8;       # pextrd
__extract   {T, imm8 & T=[2]i64}                       (a:T)              => emit i64    "_mm_extract_epi64" a imm8;       # pextrq
__extract   {T, imm8 & T=[16]i8}                       (a:T)              => emit i8     "_mm_extract_epi8" a imm8;        # pextrb
__extract   {T, imm8 & T=[4]f32}                       (a:T)              => emit f32    "_mm_extract_ps" a imm8;          # extractps
__floor     {T & T=[2]f64}                             (a:T)              => emit [2]f64 "_mm_floor_pd" a;                 # roundpd
__floor     {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_floor_ps" a;                 # roundps
__floor     {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_floor_sd" a b;               # roundsd
__floor     {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_floor_ss" a b;               # roundss
__hadd      {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_hadd_epi16" a b;             # phaddw
__hadd      {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_hadd_epi32" a b;             # phaddd
__hadd      {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_hadd_pd" a b;                # haddpd
__hadd      {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_hadd_ps" a b;                # haddps
__hadds     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_hadds_epi16" a b;            # phaddsw
__hsub      {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_hsub_epi16" a b;             # phsubw
__hsub      {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_hsub_epi32" a b;             # phsubd
__hsub      {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_hsub_pd" a b;                # hsubpd
__hsub      {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_hsub_ps" a b;                # hsubps
__hsubs     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_hsubs_epi16" a b;            # phsubsw
__insert    {T, S, imm8 & T=[8]i16 & S=i16}            (a:T, i:S)         => emit [8]i16 "_mm_insert_epi16" a i imm8;      # pinsrw
__insert    {T, S, imm8 & T=[4]i32 & S=i32}            (a:T, i:S)         => emit [4]i32 "_mm_insert_epi32" a i imm8;      # pinsrd
__insert    {T, S, imm8 & T=[2]i64 & S=i64}            (a:T, i:S)         => emit [2]i64 "_mm_insert_epi64" a i imm8;      # pinsrq
__insert    {T, S, imm8 & T=[16]i8 & S=i8}             (a:T, i:S)         => emit [16]i8 "_mm_insert_epi8" a i imm8;       # pinsrb
__insert    {T, S, imm8 & T=[4]f32 & S=[4]f32}         (a:T, b:S)         => emit [4]f32 "_mm_insert_ps" a b imm8;         # insertps
__madd      {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_madd_epi16" a b;             # pmaddwd
__maddubs   {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_maddubs_epi16" a b;          # pmaddubsw
__max       {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_max_epi16" a b;              # pmaxsw
__max       {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_max_epi32" a b;              # pmaxsd
__max       {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_max_epi8" a b;               # pmaxsb
__max       {T, S & T=[8]u16 & S=[8]u16}               (a:T, b:S)         => emit [8]u16 "_mm_max_epu16" a b;              # pmaxuw
__max       {T, S & T=[4]u32 & S=[4]u32}               (a:T, b:S)         => emit [4]u32 "_mm_max_epu32" a b;              # pmaxud
__max       {T, S & T=[16]u8 & S=[16]u8}               (a:T, b:S)         => emit [16]u8 "_mm_max_epu8" a b;               # pmaxub
__max       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_max_pd" a b;                 # maxpd
__max       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_max_ps" a b;                 # maxps
__max       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_max_sd" a b;                 # maxsd
__max       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_max_ss" a b;                 # maxss
__min       {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_min_epi16" a b;              # pminsw
__min       {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_min_epi32" a b;              # pminsd
__min       {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_min_epi8" a b;               # pminsb
__min       {T, S & T=[8]u16 & S=[8]u16}               (a:T, b:S)         => emit [8]u16 "_mm_min_epu16" a b;              # pminuw
__min       {T, S & T=[4]u32 & S=[4]u32}               (a:T, b:S)         => emit [4]u32 "_mm_min_epu32" a b;              # pminud
__min       {T, S & T=[16]u8 & S=[16]u8}               (a:T, b:S)         => emit [16]u8 "_mm_min_epu8" a b;               # pminub
__min       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_min_pd" a b;                 # minpd
__min       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_min_ps" a b;                 # minps
__min       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_min_sd" a b;                 # minsd
__min       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_min_ss" a b;                 # minss
__minpos    {T & T=[8]u16}                             (a:T)              => emit [8]u16 "_mm_minpos_epu16" a;             # phminposuw
__move      {T & T=[2]i64}                             (a:T)              => emit [2]i64 "_mm_move_epi64" a;               # movq
__move      {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_move_sd" a b;                # movsd
__move      {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_move_ss" a b;                # movss
__movedup   {T & T=[2]f64}                             (a:T)              => emit [2]f64 "_mm_movedup_pd" a;               # movddup
__movehdup  {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_movehdup_ps" a;              # movshdup
__movehl    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_movehl_ps" a b;              # movhlps
__moveldup  {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_moveldup_ps" a;              # movsldup
__movelh    {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_movelh_ps" a b;              # movlhps
__movemask  {T & T=[16]i8}                             (a:T)              => emit [16]u1 "_mm_movemask_epi8" a;            # pmovmskb
__movemask  {T & T=[2]f64}                             (a:T)              => emit [2]u1  "_mm_movemask_pd" a;              # movmskpd
__movemask  {T & T=[4]f32}                             (a:T)              => emit [4]u1  "_mm_movemask_ps" a;              # movmskps
__mpsadbw   {T, S, imm8 & T=[16]u8 & S=[16]u8}         (a:T, b:S)         => emit [16]u8 "_mm_mpsadbw_epu8" a b imm8;      # mpsadbw
__mul       {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_mul_epi32" a b;              # pmuldq
__mul       {T, S & T=[4]u32 & S=[4]u32}               (a:T, b:S)         => emit [4]u32 "_mm_mul_epu32" a b;              # pmuludq
__mul       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_mul_pd" a b;                 # mulpd
__mul       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_mul_ps" a b;                 # mulps
__mul       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_mul_sd" a b;                 # mulsd
__mul       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_mul_ss" a b;                 # mulss
__mulhi     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_mulhi_epi16" a b;            # pmulhw
__mulhi     {T, S & T=[8]u16 & S=[8]u16}               (a:T, b:S)         => emit [8]u16 "_mm_mulhi_epu16" a b;            # pmulhuw
__mulhrs    {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_mulhrs_epi16" a b;           # pmulhrsw
__mullo     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_mullo_epi16" a b;            # pmullw
__mullo     {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_mullo_epi32" a b;            # pmulld
__or        {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_or_pd" a b;                  # orpd
__or        {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_or_ps" a b;                  # orps
__or        {T, S & T.size=128 & S.size=128}           (a:T, b:S)         => emit T      "_mm_or_si128" a b;               # por
__packs     {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [16]i8 "_mm_packs_epi16" a b;            # packsswb
__packs     {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [8]i16 "_mm_packs_epi32" a b;            # packssdw
__packus    {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [16]u8 "_mm_packus_epi16" a b;           # packuswb
__packus    {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [8]u16 "_mm_packus_epi32" a b;           # packusdw
__rcp       {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_rcp_ps" a;                   # rcpps
__rcp       {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_rcp_ss" a;                   # rcpss
__round     {T, rounding & T=[2]f64}                   (a:T)              => emit [2]f64 "_mm_round_pd" a rounding;        # roundpd
__round     {T, rounding & T=[4]f32}                   (a:T)              => emit [4]f32 "_mm_round_ps" a rounding;        # roundps
__round     {T, S, rounding & T=[2]f64 & S=[2]f64}     (a:T, b:S)         => emit [2]f64 "_mm_round_sd" a b rounding;      # roundsd
__round     {T, S, rounding & T=[4]f32 & S=[4]f32}     (a:T, b:S)         => emit [4]f32 "_mm_round_ss" a b rounding;      # roundss
__rsqrt     {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_rsqrt_ps" a;                 # rsqrtps
__rsqrt     {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_rsqrt_ss" a;                 # rsqrtss
__sad       {T, S & T=[16]u8 & S=[16]u8}               (a:T, b:S)         => emit [16]u8 "_mm_sad_epu8" a b;               # psadbw
__shuffle   {T, imm8 & T=[4]i32}                       (a:T)              => emit [4]i32 "_mm_shuffle_epi32" a imm8;       # pshufd
__shuffle   {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_shuffle_epi8" a b;           # pshufb
__shuffle   {T, S, imm8 & T=[2]f64 & S=[2]f64}         (a:T, b:S)         => emit [2]f64 "_mm_shuffle_pd" a b imm8;        # shufpd
__shuffle   {T, S, imm8 & T=[4]f32 & S=[4]f32}         (a:T, b:S)         => emit [4]f32 "_mm_shuffle_ps" a b imm8;        # shufps
__shufflehi {T, imm8 & T=[8]i16}                       (a:T)              => emit [8]i16 "_mm_shufflehi_epi16" a imm8;     # pshufhw
__shufflelo {T, imm8 & T=[8]i16}                       (a:T)              => emit [8]i16 "_mm_shufflelo_epi16" a imm8;     # pshuflw
__sign      {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_sign_epi16" a b;             # psignw
__sign      {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_sign_epi32" a b;             # psignd
__sign      {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_sign_epi8" a b;              # psignb
__bslli     {T, imm8 & T.am=16 & T.width=8}            (a:T)              => emit T      "_mm_bslli_si128" a imm8;         # pslldq
__bsrli     {T, imm8 & T.am=16 & T.width=8}            (a:T)              => emit T      "_mm_bsrli_si128" a imm8;         # psrldq
__sll       {T, S & T=[8]i16 & S=[8]i16}               (a:T, count:S)     => emit [8]i16 "_mm_sll_epi16" a count;          # psllw
__sll       {T, S & T=[4]i32 & S=[4]i32}               (a:T, count:S)     => emit [4]i32 "_mm_sll_epi32" a count;          # pslld
__sll       {T, S & T=[2]i64 & S=[2]i64}               (a:T, count:S)     => emit [2]i64 "_mm_sll_epi64" a count;          # psllq
__slli      {T, imm8 & T=[8]i16}                       (a:T)              => emit [8]i16 "_mm_slli_epi16" a imm8;          # psllw
__slli      {T, imm8 & T=[4]i32}                       (a:T)              => emit [4]i32 "_mm_slli_epi32" a imm8;          # pslld
__slli      {T, imm8 & T=[2]i64}                       (a:T)              => emit [2]i64 "_mm_slli_epi64" a imm8;          # psllq
__slli      {T, imm8 & T.am=16 & T.width=8}            (a:T)              => emit T      "_mm_slli_si128" a imm8;          # pslldq
__srl       {T, S & T=[8]i16 & S=[8]i16}               (a:T, count:S)     => emit [8]i16 "_mm_srl_epi16" a count;          # psrlw
__srl       {T, S & T=[4]i32 & S=[4]i32}               (a:T, count:S)     => emit [4]i32 "_mm_srl_epi32" a count;          # psrld
__srl       {T, S & T=[2]i64 & S=[2]i64}               (a:T, count:S)     => emit [2]i64 "_mm_srl_epi64" a count;          # psrlq
__srli      {T, imm8 & T=[8]i16}                       (a:T)              => emit [8]i16 "_mm_srli_epi16" a imm8;          # psrlw
__srli      {T, imm8 & T=[4]i32}                       (a:T)              => emit [4]i32 "_mm_srli_epi32" a imm8;          # psrld
__srli      {T, imm8 & T=[2]i64}                       (a:T)              => emit [2]i64 "_mm_srli_epi64" a imm8;          # psrlq
__srli      {T, imm8 & T.am=16 & T.width=8}            (a:T)              => emit T      "_mm_srli_si128" a imm8;          # psrldq
__sqrt      {T & T=[2]f64}                             (a:T)              => emit [2]f64 "_mm_sqrt_pd" a;                  # sqrtpd
__sqrt      {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_sqrt_ps" a;                  # sqrtps
__sqrt      {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_sqrt_sd" a b;                # sqrtsd
__sqrt      {T & T=[4]f32}                             (a:T)              => emit [4]f32 "_mm_sqrt_ss" a;                  # sqrtss
__sra       {T, S & T=[8]i16 & S=[8]i16}               (a:T, count:S)     => emit [8]i16 "_mm_sra_epi16" a count;          # psraw
__sra       {T, S & T=[4]i32 & S=[4]i32}               (a:T, count:S)     => emit [4]i32 "_mm_sra_epi32" a count;          # psrad
__srai      {T, imm8 & T=[8]i16}                       (a:T)              => emit [8]i16 "_mm_srai_epi16" a imm8;          # psraw
__srai      {T, imm8 & T=[4]i32}                       (a:T)              => emit [4]i32 "_mm_srai_epi32" a imm8;          # psrad
__sub       {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_sub_epi16" a b;              # psubw
__sub       {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_sub_epi32" a b;              # psubd
__sub       {T, S & T=[2]i64 & S=[2]i64}               (a:T, b:S)         => emit [2]i64 "_mm_sub_epi64" a b;              # psubq
__sub       {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_sub_epi8" a b;               # psubb
__sub       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_sub_pd" a b;                 # subpd
__sub       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_sub_ps" a b;                 # subps
__sub       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_sub_sd" a b;                 # subsd
__sub       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_sub_ss" a b;                 # subss
__subs      {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_subs_epi16" a b;             # psubsw
__subs      {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_subs_epi8" a b;              # psubsb
__subs      {T, S & T=[8]u16 & S=[8]u16}               (a:T, b:S)         => emit [8]u16 "_mm_subs_epu16" a b;             # psubusw
__subs      {T, S & T=[16]u8 & S=[16]u8}               (a:T, b:S)         => emit [16]u8 "_mm_subs_epu8" a b;              # psubusb
__test      {T, S & T.size=128 & S.size=128}           (a:T, mask:S)      => emit u1     "_mm_test_all_zeros" a mask;      # ptest
__test      {T, S & T.size=128 & S.size=128}           (a:T, mask:S)      => emit u1     "_mm_test_mix_ones_zeros" a mask; # ptest
__testc     {T, S & T.size=128 & S.size=128}           (a:T, b:S)         => emit u1     "_mm_testc_si128" a b;            # ptest
__testnzc   {T, S & T.size=128 & S.size=128}           (a:T, b:S)         => emit u1     "_mm_testnzc_si128" a b;          # ptest
__testz     {T, S & T.size=128 & S.size=128}           (a:T, b:S)         => emit u1     "_mm_testz_si128" a b;            # ptest
__ucomieq   {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit u1     "_mm_ucomieq_sd" a b;             # ucomisd
__ucomieq   {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit u1     "_mm_ucomieq_ss" a b;             # ucomiss
__ucomige   {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit u1     "_mm_ucomige_sd" a b;             # ucomisd
__ucomige   {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit u1     "_mm_ucomige_ss" a b;             # ucomiss
__ucomigt   {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit u1     "_mm_ucomigt_sd" a b;             # ucomisd
__ucomigt   {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit u1     "_mm_ucomigt_ss" a b;             # ucomiss
__ucomile   {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit u1     "_mm_ucomile_sd" a b;             # ucomisd
__ucomile   {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit u1     "_mm_ucomile_ss" a b;             # ucomiss
__ucomilt   {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit u1     "_mm_ucomilt_sd" a b;             # ucomisd
__ucomilt   {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit u1     "_mm_ucomilt_ss" a b;             # ucomiss
__ucomineq  {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit u1     "_mm_ucomineq_sd" a b;            # ucomisd
__ucomineq  {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit u1     "_mm_ucomineq_ss" a b;            # ucomiss
__unpackhi  {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_unpackhi_epi16" a b;         # punpckhwd
__unpackhi  {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_unpackhi_epi32" a b;         # punpckhdq
__unpackhi  {T, S & T=[2]i64 & S=[2]i64}               (a:T, b:S)         => emit [2]i64 "_mm_unpackhi_epi64" a b;         # punpckhqdq
__unpackhi  {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_unpackhi_epi8" a b;          # punpckhbw
__unpackhi  {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_unpackhi_pd" a b;            # unpckhpd
__unpackhi  {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_unpackhi_ps" a b;            # unpckhps
__unpacklo  {T, S & T=[8]i16 & S=[8]i16}               (a:T, b:S)         => emit [8]i16 "_mm_unpacklo_epi16" a b;         # punpcklwd
__unpacklo  {T, S & T=[4]i32 & S=[4]i32}               (a:T, b:S)         => emit [4]i32 "_mm_unpacklo_epi32" a b;         # punpckldq
__unpacklo  {T, S & T=[2]i64 & S=[2]i64}               (a:T, b:S)         => emit [2]i64 "_mm_unpacklo_epi64" a b;         # punpcklqdq
__unpacklo  {T, S & T=[16]i8 & S=[16]i8}               (a:T, b:S)         => emit [16]i8 "_mm_unpacklo_epi8" a b;          # punpcklbw
__unpacklo  {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_unpacklo_pd" a b;            # unpcklpd
__unpacklo  {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_unpacklo_ps" a b;            # unpcklps
__xor       {T, S & T=[2]f64 & S=[2]f64}               (a:T, b:S)         => emit [2]f64 "_mm_xor_pd" a b;                 # xorpd
__xor       {T, S & T=[4]f32 & S=[4]f32}               (a:T, b:S)         => emit [4]f32 "_mm_xor_ps" a b;                 # xorps
__xor       {T, S & T.size=128 & S.size=128}           (a:T, b:S)         => emit T      "_mm_xor_si128" a b;              # pxor